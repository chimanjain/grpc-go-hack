// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: project/project.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProjectManagement_GetProject_FullMethodName     = "/project.ProjectManagement/GetProject"
	ProjectManagement_GetProjects_FullMethodName    = "/project.ProjectManagement/GetProjects"
	ProjectManagement_FetchProjects_FullMethodName  = "/project.ProjectManagement/FetchProjects"
	ProjectManagement_StreamProjects_FullMethodName = "/project.ProjectManagement/StreamProjects"
)

// ProjectManagementClient is the client API for ProjectManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectManagementClient interface {
	GetProject(ctx context.Context, in *ProjectID, opts ...grpc.CallOption) (*Project, error)
	GetProjects(ctx context.Context, in *ProjectID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Project], error)
	FetchProjects(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ProjectID, Projects], error)
	StreamProjects(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProjectID, Project], error)
}

type projectManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectManagementClient(cc grpc.ClientConnInterface) ProjectManagementClient {
	return &projectManagementClient{cc}
}

func (c *projectManagementClient) GetProject(ctx context.Context, in *ProjectID, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectManagement_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManagementClient) GetProjects(ctx context.Context, in *ProjectID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Project], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProjectManagement_ServiceDesc.Streams[0], ProjectManagement_GetProjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProjectID, Project]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectManagement_GetProjectsClient = grpc.ServerStreamingClient[Project]

func (c *projectManagementClient) FetchProjects(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ProjectID, Projects], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProjectManagement_ServiceDesc.Streams[1], ProjectManagement_FetchProjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProjectID, Projects]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectManagement_FetchProjectsClient = grpc.ClientStreamingClient[ProjectID, Projects]

func (c *projectManagementClient) StreamProjects(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProjectID, Project], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProjectManagement_ServiceDesc.Streams[2], ProjectManagement_StreamProjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProjectID, Project]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectManagement_StreamProjectsClient = grpc.BidiStreamingClient[ProjectID, Project]

// ProjectManagementServer is the server API for ProjectManagement service.
// All implementations must embed UnimplementedProjectManagementServer
// for forward compatibility.
type ProjectManagementServer interface {
	GetProject(context.Context, *ProjectID) (*Project, error)
	GetProjects(*ProjectID, grpc.ServerStreamingServer[Project]) error
	FetchProjects(grpc.ClientStreamingServer[ProjectID, Projects]) error
	StreamProjects(grpc.BidiStreamingServer[ProjectID, Project]) error
	mustEmbedUnimplementedProjectManagementServer()
}

// UnimplementedProjectManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectManagementServer struct{}

func (UnimplementedProjectManagementServer) GetProject(context.Context, *ProjectID) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectManagementServer) GetProjects(*ProjectID, grpc.ServerStreamingServer[Project]) error {
	return status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedProjectManagementServer) FetchProjects(grpc.ClientStreamingServer[ProjectID, Projects]) error {
	return status.Errorf(codes.Unimplemented, "method FetchProjects not implemented")
}
func (UnimplementedProjectManagementServer) StreamProjects(grpc.BidiStreamingServer[ProjectID, Project]) error {
	return status.Errorf(codes.Unimplemented, "method StreamProjects not implemented")
}
func (UnimplementedProjectManagementServer) mustEmbedUnimplementedProjectManagementServer() {}
func (UnimplementedProjectManagementServer) testEmbeddedByValue()                           {}

// UnsafeProjectManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectManagementServer will
// result in compilation errors.
type UnsafeProjectManagementServer interface {
	mustEmbedUnimplementedProjectManagementServer()
}

func RegisterProjectManagementServer(s grpc.ServiceRegistrar, srv ProjectManagementServer) {
	// If the following call pancis, it indicates UnimplementedProjectManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProjectManagement_ServiceDesc, srv)
}

func _ProjectManagement_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManagementServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManagement_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManagementServer).GetProject(ctx, req.(*ProjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManagement_GetProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectManagementServer).GetProjects(m, &grpc.GenericServerStream[ProjectID, Project]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectManagement_GetProjectsServer = grpc.ServerStreamingServer[Project]

func _ProjectManagement_FetchProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectManagementServer).FetchProjects(&grpc.GenericServerStream[ProjectID, Projects]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectManagement_FetchProjectsServer = grpc.ClientStreamingServer[ProjectID, Projects]

func _ProjectManagement_StreamProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectManagementServer).StreamProjects(&grpc.GenericServerStream[ProjectID, Project]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectManagement_StreamProjectsServer = grpc.BidiStreamingServer[ProjectID, Project]

// ProjectManagement_ServiceDesc is the grpc.ServiceDesc for ProjectManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectManagement",
	HandlerType: (*ProjectManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _ProjectManagement_GetProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProjects",
			Handler:       _ProjectManagement_GetProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchProjects",
			Handler:       _ProjectManagement_FetchProjects_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamProjects",
			Handler:       _ProjectManagement_StreamProjects_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "project/project.proto",
}
